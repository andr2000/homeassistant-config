substitutions:
  device_name: parking_light
  upper_devicename: Parking Light

esphome:
  name: ${device_name}
  platform: ESP8266
  board: esp01_1m

<<: !include wifi.yaml

#disable logging
logger:
  baud_rate: 0

# - Blink slowly (about every second) when a warning is active.
#   Warnings are active when for example reading a sensor value
#   fails temporarily or the WiFi/MQTT connections are disrupted.
# - Blink quickly (multiple times per second) when an error is active.
#   Errors indicate that ESPHome has found an error while setting up.
#   In most cases, ESPHome will still try to recover from the error
#   and continue with all other operations.
# - Stay off otherwise.
status_led:
  pin:
    number: GPIO13
    inverted: yes

remote_receiver:
  pin:
    number: 4
  dump: rc_switch
  filter: 250us
  tolerance: 50%
  idle: 4ms

switch:
- platform: gpio
  name: '${upper_devicename}'
  pin:
    number: GPIO12
  id: ${device_name}_relay

binary_sensor:
- platform: remote_receiver
  name: 'Main remote right btn'
  internal: true
  on_press:
    - switch.toggle: ${device_name}_relay
  rc_switch_raw:
    code: '110101111111010010110101'
    protocol: 9
  filters:
    - delayed_off: 500ms
- platform: remote_receiver
  name: 'Spare remote right btn'
  internal: true
  on_press:
    - switch.toggle: ${device_name}_relay
  rc_switch_raw:
    code: '110101111111010010000001'
    protocol: 9
  filters:
    - delayed_off: 500ms
- platform: remote_receiver
  name: 'SONOFF RFR3 A btn'
  internal: true
  on_press:
    - switch.toggle: ${device_name}_relay
  rc_switch_raw:
    code: '110010010101101100100100'
    protocol: 1
  filters:
    - delayed_off: 500ms
- platform: gpio
  id: ${device_name}_switch
  pin:
    number: GPIO0
    mode: INPUT_PULLUP
    inverted: True
  on_press:
    - switch.toggle: ${device_name}_relay
# The Status Binary Sensor exposes the node state (if itâ€™s
# connected to via MQTT/native API) for Home Assistant.
- platform: status
  name: ${upper_devicename} status
